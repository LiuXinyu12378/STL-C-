#include "speechManager.h"
#include<string>
#include<algorithm>
#include<deque>
#include<functional>
#include<numeric>
#include<fstream>

//构造函数
SpeechManager::SpeechManager()
{
	this->initSpeech();
	this->createSpeaker();
}

//采单展示
void SpeechManager::show_Menu()
{
	cout << "****************************************************" << endl;
	cout << "************* 欢迎参加演讲比赛 *********************" << endl;
	cout << "************* 1.开始演讲比赛 ***********************" << endl;
	cout << "************* 2.查看往届记录 ***********************" << endl;
	cout << "************* 3.清空比赛记录 ***********************" << endl;
	cout << "************* 0.退出比赛系统 ***********************" << endl;
	cout << "****************************************************" << endl;
	cout << endl;
}

void SpeechManager::createSpeaker()
{
	string SpeakerSeed = "ABCDEFGHIJKL";
	for (int i = 0; i < SpeakerSeed.size(); i++)
	{
		string name = "选手";
		name += SpeakerSeed[i];

		Speaker sp;
		sp.m_Name = name;
		for (int j = 0; j < 2; j++)
		{
			sp.m_Score[j] = 0.0;
		}

		//创建选手编号 并且放入到v1容器中
		this->v1.push_back(i + 10001);

		//选手编号以及对应选手 放入到map容器中
		this->m_Speaker.insert(make_pair(i + 10001, sp));
	}
}

//开始比赛
void SpeechManager::startSpeech()
{
	//第一轮比赛

	//1.抽签
	this->speechDraw();
	//2.比赛
	this->speechContest();
	//3.显示晋级结果
	this->showScore();
	//第二轮比赛开始
	this->m_Index++;
	//1.抽签
	this->speechDraw();
	//2.比赛
	this->speechContest();
	//3.显示最终结果
	this->showScore();
	//保存文件分数
	this->saveRecord();

	//重置比赛，获取记录
	//初始化容器和属性
	this->initSpeech();
	//创建12名选手
	this->createSpeaker();
	//加载往届记录
	this->loadRecord();

	cout << "本届比赛完毕！" << endl;
	system("pause");
	system("cls");
}

//抽签
void SpeechManager::speechDraw()
{
	cout << "第《" << this->m_Index << "》轮比赛选手正在抽签" << endl;
	cout << "----------------------" << endl;

	if (this->m_Index == 1)
	{
		random_shuffle(this->v1.begin(), this->v1.end());
		for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	else
	{
		random_shuffle(this->v2.begin(), this->v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	cout << "----------------------" << endl;
	system("pause");
	cout << endl;
}

//比赛
void SpeechManager::speechContest()
{
	cout << "----------------第" << this->m_Index << "轮比赛正式开始----------------" << endl;

	//准备临时的容器 存放小组成绩
	multimap<double, int, greater<double>> groupScore;

	int num = 0;  //记录人员个数 6人一组

	vector<int>v_Src;  //比赛选手容器
	if (this->m_Index == 1)
	{
		v_Src = v1;
	}
	else
	{
		v_Src = v2;
	}

	for (vector<int>::iterator it = v_Src.begin(); it != v_Src.end(); it++)
	{
		num++;
		deque<double>d;

		for (int i = 0; i < 10; i++)
		{
			double score = (rand() % 401 + 600)/10.f;
			d.push_back(score);
		}
		sort(d.begin(), d.end(),greater<double>());

		d.pop_front();
		d.pop_back();

		double sum = accumulate(d.begin(), d.end(), 0.0);
		double avg = sum / (double)d.size();

		this->m_Speaker[*it].m_Score[this->m_Index - 1] = avg;//将打分数据 放入到临时小组容器中

		groupScore.insert(make_pair(avg, *it));  //key是得分，value是具体选手编号

		//每6人取出前3名
		if (num % 6 == 0)
		{
			cout << "第" << num / 6 << "小组比赛名次：" << endl;
			for (multimap<double, int, greater<double>>::iterator it = groupScore.begin(); it != groupScore.end(); it++)
			{
				cout << "编号：" << it->second << " 姓名：" << this->m_Speaker[it->second].m_Name << " 成绩" << this->m_Speaker[it->second].m_Score[this->m_Index - 1] << endl;
			}
			
			int cout = 0;
			for (multimap<double, int, greater<double>>::iterator it = groupScore.begin(); it != groupScore.end()&&cout<3; it++,cout++)
			{
				if (this->m_Index == 1)
				{
					v2.push_back((*it).second);
				}
				else
				{
					vVictory.push_back((*it).second);
				}
			}

			groupScore.clear();//小组容器清空

		}
	}
	cout << "--------------------第" << this->m_Index << "轮比赛完毕！--------------------" << endl;
	system("pause");
}

//显示得分
void SpeechManager::showScore()
{
	cout << "-----------------第" << this->m_Index << "轮晋级选手信息如下：---------------" << endl;
	vector<int>v;
	if (this->m_Index == 1)
	{
		v = v2;
	}
	else
	{
		v = vVictory;
	}
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "选手编号：" << *it << "姓名：" << this->m_Speaker[*it].m_Name << " 得分：" << this->m_Speaker[*it].m_Score[this->m_Index - 1] << endl;
	}
	system("pause");
	system("cls");
	this->show_Menu();
}

//保存数据到文件
void SpeechManager::saveRecord()
{
	ofstream ofs;
	ofs.open("speech.csv", ios::out | ios::app); //追加的方式写文件

	//讲每个选手数据 写入到文件中
	for (vector<int>::iterator it = vVictory.begin(); it != vVictory.end(); it++)
	{
		ofs << *it <<","<<this->m_Speaker[*it].m_Name<< "," << this->m_Speaker[*it].m_Score[1] << ",";
	}
	ofs << endl;

	//关闭文件
	ofs.close();
	cout << "记录已经保存" << endl;

	//有记录了，文件不为空了
	this->fileIsEmpty = false;
}

void SpeechManager::initSpeech()
{
	//容器置空
	this->v1.clear();
	this->v2.clear();
	this->vVictory.clear();
	this->m_Speaker.clear();

	this->m_Index = 1;
	this->m_Record.clear();
}

void SpeechManager::exitSystem()
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}

//读取记录
void SpeechManager::loadRecord()
{
	ifstream ifs("speech.csv", ios::in);//读文件
	if (!ifs.is_open())
	{
		this->fileIsEmpty = true;
		//cout << "文件不存在" << endl;
		ifs.close();
		return;
	}

	//文件清空情况
	char ch;
	ifs >> ch;
	if (ifs.eof())    //
	{
		//cout << "文件为空" << endl;
		this->fileIsEmpty = true;
		ifs.close();
		return;
	}

	//文件不为空
	this->fileIsEmpty = false;

	ifs.putback(ch);// 将上面读取的单个字符 放回来
	string data;
	int index = 0;
	while (ifs >> data)
	{
		vector<string>v;
		int pos = -1;//查到“，”位置的变量
		int start = 0;
		while (true)
		{
			pos = data.find(",", start);
			if (pos == -1)
			{
			//没有找到
				break;
			}
			string temp = data.substr(start, pos - start);
			//cout << temp << endl;
			v.push_back(temp);
			start = pos + 1;
		}
		this->m_Record.insert(make_pair(index, v));
		index++;
	}
	ifs.close();

}

//显示往届记录
void SpeechManager::showRecord()
{
	if (this->fileIsEmpty)
	{
		cout << "文件不存在，或记录为空！" << endl;
	}
	else
	{
		for (map<int, vector<string>>::iterator it = m_Record.begin(); it != m_Record.end(); it++)
		{
			cout << "第" << it->first << "届 " << " 冠军编号：" << it->second[0] << " 冠军姓名：" << it->second[1] << " 冠军分数：" << it->second[2] <<
				" 亚军编号：" << it->second[3] << " 亚军姓名：" << it->second[4] << " 亚军分数：" << it->second[5] <<
				" 季军编号：" << it->second[6] << " 季军姓名：" << it->second[7] << " 季军分数：" << it->second[8] << endl;
		}
	}
	system("pause");
	system("cls");
}

//清空比赛记录
void SpeechManager::clearRecord()
{
	cout << "是否确定清空文件？" << endl;
	cout << "1.是" << endl;
	cout << "2.否" << endl;

	int select = 0;
	cin >> select;

	if (select == 1)
	{
		//确认清空
		ofstream ofs("speech.csv", ios::trunc);
		ofs.close();

		//初始化容器和属性
		this->initSpeech();

		//创建12名选手
		this->createSpeaker();

		//加载往届记录
		this->loadRecord();

		cout << "清空成功" << endl;
	}
	system("pause");
	system("cls");
}

//析构函数
SpeechManager::~SpeechManager()
{

}